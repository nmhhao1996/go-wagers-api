// Code generated by mockery v2.28.1. DO NOT EDIT.

package repository

import (
	context "context"

	models "github.com/nmhhao1996/go-wagers-api/internal/models"
	mock "github.com/stretchr/testify/mock"

	pagination "github.com/nmhhao1996/go-wagers-api/internal/core/pagination"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, m
func (_m *MockRepository) Create(ctx context.Context, m models.Wager) (models.Wager, error) {
	ret := _m.Called(ctx, m)

	var r0 models.Wager
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Wager) (models.Wager, error)); ok {
		return rf(ctx, m)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Wager) models.Wager); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(models.Wager)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Wager) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - m models.Wager
func (_e *MockRepository_Expecter) Create(ctx interface{}, m interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, m)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, m models.Wager)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Wager))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 models.Wager, _a1 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, models.Wager) (models.Wager, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBuy provides a mock function with given fields: ctx, m
func (_m *MockRepository) CreateBuy(ctx context.Context, m models.WagerBuy) (models.WagerBuy, error) {
	ret := _m.Called(ctx, m)

	var r0 models.WagerBuy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WagerBuy) (models.WagerBuy, error)); ok {
		return rf(ctx, m)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WagerBuy) models.WagerBuy); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(models.WagerBuy)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WagerBuy) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateBuy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBuy'
type MockRepository_CreateBuy_Call struct {
	*mock.Call
}

// CreateBuy is a helper method to define mock.On call
//   - ctx context.Context
//   - m models.WagerBuy
func (_e *MockRepository_Expecter) CreateBuy(ctx interface{}, m interface{}) *MockRepository_CreateBuy_Call {
	return &MockRepository_CreateBuy_Call{Call: _e.mock.On("CreateBuy", ctx, m)}
}

func (_c *MockRepository_CreateBuy_Call) Run(run func(ctx context.Context, m models.WagerBuy)) *MockRepository_CreateBuy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.WagerBuy))
	})
	return _c
}

func (_c *MockRepository_CreateBuy_Call) Return(_a0 models.WagerBuy, _a1 error) *MockRepository_CreateBuy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateBuy_Call) RunAndReturn(run func(context.Context, models.WagerBuy) (models.WagerBuy, error)) *MockRepository_CreateBuy_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id int) (models.Wager, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Wager
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Wager, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Wager); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Wager)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockRepository_GetByID_Call {
	return &MockRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockRepository_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_GetByID_Call) Return(_a0 models.Wager, _a1 error) *MockRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByID_Call) RunAndReturn(run func(context.Context, int) (models.Wager, error)) *MockRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, pagQuery
func (_m *MockRepository) List(ctx context.Context, pagQuery pagination.Query) ([]models.Wager, error) {
	ret := _m.Called(ctx, pagQuery)

	var r0 []models.Wager
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pagination.Query) ([]models.Wager, error)); ok {
		return rf(ctx, pagQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pagination.Query) []models.Wager); ok {
		r0 = rf(ctx, pagQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Wager)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pagination.Query) error); ok {
		r1 = rf(ctx, pagQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - pagQuery pagination.Query
func (_e *MockRepository_Expecter) List(ctx interface{}, pagQuery interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", ctx, pagQuery)}
}

func (_c *MockRepository_List_Call) Run(run func(ctx context.Context, pagQuery pagination.Query)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pagination.Query))
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(_a0 []models.Wager, _a1 error) *MockRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(context.Context, pagination.Query) ([]models.Wager, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, m
func (_m *MockRepository) Update(ctx context.Context, m models.Wager) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Wager) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - m models.Wager
func (_e *MockRepository_Expecter) Update(ctx interface{}, m interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, m)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, m models.Wager)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Wager))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(context.Context, models.Wager) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
